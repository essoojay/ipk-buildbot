#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
# HelmiWrt by helmiau.com
#=================================================

name: Build IPK

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 17 * * *
#  watch:
#    types: started

env:
  TOOLCHAIN_TAG: coolsnowwolf-lede-master
  TOOLCHAIN_NAME: toolchain-image-coolsnowwolf-lede-master-rpi-4.img
  CONFIG_FILE: config/universal.config
  DIY_SH: scripts/lean-openwrt.sh
  WEBROOT: /data/dnmp/www/openwrt.cc
  UPLOAD_RELEASE: true
  TZ: Asia/Jakarta

jobs:
  Build:
    runs-on: ubuntu-18.04

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) rdate
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          docker image prune -a -f
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Free Up More Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 256
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          overprovision-lvm: 'true'

      - name: Checkout
        uses: actions/checkout@main

      - name: Prepare Toolchain Image
        id: prepare
        run: |
          df -hT $PWD
          wget -q https://github.com/helmiau/OpenWrt-Toolchain/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_NAME -O toolchain-image.img
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop toolchain-image.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
          git pull

      - name: Install Feeds
        id: feeds
        run: |
          cd $OPENWRTROOT
          chmod +x ../scripts/*.sh
          ../scripts/hook-feeds.sh

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRTROOT/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
          cd $OPENWRTROOT
          ../$DIY_SH
          sed -i "/KERNEL_PATCHVER=/c\KERNEL_PATCHVER=5.4" "target/linux/bcm27xx/Makefile"

      - name: Download Package
        id: package
        run: |
          cd $OPENWRTROOT
          make defconfig
          make download -j16 && make download -j16
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Tools
        id: tools
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Packages
        id: compile
        run: |
          cd $OPENWRTROOT
          echo -e "$(nproc) thread compile"
          make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
          make package/index
          cd $OPENWRTROOT/bin/packages/*
          PLATFORM=$(basename `pwd`)
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "::set-output name=TARGET::$(echo $TARGET)"
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=FIRMWARE::$(echo $PWD)"
          echo "::set-output name=COMPILE_STATUS::success"
          #Copy files to 
          #mkdir -p files/www/ipv6-modules
          #cp bin/packages/$PLATFORM/luci/luci-app-* files/www/ipv6-modules

      - name: Organize Files
        id: organize
        if: steps.compile.outputs.COMPILE_STATUS == 'success' && !cancelled()
        run: |
          cd openwrt/bin/packages
          find . -type f -name 'luci-app-libernet' | while read FILE ; do
            echo -e "helmilog:: luci-app-libernet located at $(readlink -f ${FILE})" ;
          done
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          echo "::set-output name=ORGANIZE_STATUS::success"
          echo -e "===== End of Information ====="
          echo -e "FILE_DATE is ....... $FILE_DATE"
          echo -e "OPENWRTROOT is ....... $TARGET"
          echo -e "PLATFORM is ....... $PLATFORM"
          echo -e "TARGET is ....... $TARGET"
          echo -e "FIRMWARE is ....... $FIRMWARE"
          echo -e "===== End of Information ====="
